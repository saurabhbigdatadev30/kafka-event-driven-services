server:
  port: 8181
# This is the configuration for the Twitter to Kafka microservice.
# It includes settings for connecting to Twitter's API, Kafka, and retry configurations.
# It also includes mock tweet generation settings for testing purposes.
twitter-to-kafka-service:
  twitter-keywords:
    - Java
    - Microservices
    - Kafka
    - Elasticsearch
  welcome-message: Hello microservices!
  # Enable the Twitter - 4J implementation of the StreamRunner
  enable-v2-tweets: false
  enable-mock-tweets: true
  twitter-v2-base-url: https://api.twitter.com/2/tweets/search/stream?tweet.fields=created_at&expansions=author_id  # twitterV2BaseUrl in TwitterToKafkaService.java
  twitter-v2-rules-base-url: https://api.twitter.com/2/tweets/search/stream/rules # twitterV2RulesBaseUrl in TwitterToKafkaService.java
  # Twitter API Bearer Token reads from environment variable
  twitter-v2-bearer-token: ${TWITTER_BEARER_TOKEN}  # twitterV2BearerToken in TwitterToKafkaService.java
  mock-min-tweet-length: 5  # mockMinTweetLength in TwitterToKafkaService.java
  mock-max-tweet-length: 15 # mockMaxTweetLength in TwitterToKafkaService.java
  mock-sleep-ms: 10000      # mockSleepMs in TwitterToKafkaService.java

# This is the configuration for the Kafka Retry mechanism.
# It includes settings for the initial interval, maximum interval, multiplier, maximum attempts, and sleep
retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.0
  maxAttempts: 3
  sleep-time-ms: 2000

# This is the configuration for the Kafka cluster.
# It includes settings for the bootstrap servers, schema registry URL, topic names, and partitioning.
kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  topic-name: twitter-topic
  topic-names-to-create:
    - twitter-topic
    - twitter-analytics-topic
  num-of-partitions: 3
  replication-factor: 3

# This is the configuration for the Kafka producer.
kafka-producer-config:
  # Serializer/Deserializer (SerDes) settings
  key-serializer-class: org.apache.kafka.common.serialization.LongSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  # The acks property sets the number of acknowledgments the producer requires have received before
  # considering a request complete. The producer will wait for the full set of in-sync replicas to acknowledge the record.

  # acks=0: The producer will not wait for any acknowledgment from the broker. This is the fastest option, but it also means that
  #          messages may be lost if the broker goes down before the message is written to disk.
  # acks=1: The producer will wait for the leader to acknowledge that it has received the message.
  # acks=all: The producer will wait for all in-sync replicas to acknowledge that they have received the message.
  acks: all
    # The enable-idempotence property ensures that the producer will not introduce duplicates when a retry occurs.
  enable-idempotence: true
    # The max-in-flight-requests-per-connection property sets the maximum number of unacknowledged requests the
    # producer will send on a single connection before blocking.
  #   If 1, the producer will not send a new request until the previous request has been acknowledged.
  #   If greater than 1, the producer can send multiple requests without waiting for the previous requests to be acknowledged.
  # Note: If enable-idempotence is set to true, max-in-flight-requests-per-connection must be less than or equal to 5.
  max-in-flight-requests-per-connection: 5
  # The batch-size Kafka producer property sets the maximum number of bytes to batch together before sending to a broker.
  batch-size: 16384
  batch-size-boost-factor: 100
  # The linger-ms property sets the maximum time to buffer data before sending to a broker.
  # With a value of 0, the producer will send data as soon as it is available.
  # With a value greater than 0, the producer will wait up to the specified time for more data to arrive before sending.
  linger-ms: 5
  # request-timeout-ms property sets the maximum amount of time the client will wait for the response of a request.
  request-timeout-ms: 60000
  # retry-logic [retry-count +  retry-backoff-ms] for failed sends or delivery-timeout-ms
    # retry-count: Number of retries for failed sends. Default is 2147483647 (Integer.MAX_VALUE)
  # ****** The first record fails to be persisted in the broker, gets inserted in the second try, so this gets inserted after the .
  # ******  records that naturally comes after it. To prevent this, we use max.in.flight.request.per .connection property and set it to 1
  retry-count: 5
  retry-backoff-ms: 1000
#  The producer will wait up to 120 secs including the retries & then will throw TimeoutException
#
 # delivery-timeout-ms: 120000
