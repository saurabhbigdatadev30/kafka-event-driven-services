<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>microservices-demo</artifactId>
        <groupId>com.microservices.demo</groupId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <!-- This module creates & configures AdminClient to create Kafka topics with retry logic
     kafka-admin module has dependency on common-config module which creates RetryTemplate bean
     -->

    <artifactId>kafka-admin</artifactId>
    <dependencies>
        <!--
             We add  app-config-data module as dependency to read the kafka topic names to be created from configuration .
         -->
        <dependency>
            <groupId>com.microservices.demo</groupId>
            <artifactId>app-config-data</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <!--
             The kafka-admin module uses AdminClient with RetryTemplate to create topic & check topics - see KafkaAdminClientConfig class.
             Here we need retry logic, because when we start everything together including Kafka cluster and the services,
             we might need to wait until Kafka cluster healthy and ready to create topics and returning list of topics.
             Spring, AOP and specifically spring retry template is a perfect candidate to use in this scenario.

            We create  separate module common-config module that defines Retry mechanism . This module creates  RetryTemplate @Bean configuration .

           We  add common-config module as dependency in kafka-admin module.
           kafka-admin module => common-config module (creates @Bean [RetryTemplate]  => app-config-data module (contains the configuration classes).
            -->
        <dependency>
            <groupId>com.microservices.demo</groupId>
            <artifactId>common-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
    </dependencies>


</project>